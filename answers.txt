-------------------------------------------------------------------------------
UCLA CS 111 Minilab 1. "WeensyOS"
Professor Peter Reiher
Winter 2014

FILE:	answers.txt

AUTHOR(s):
Alan Kha        904030522	akhahaha@gmail.com

-------------------------------------------------------------------------------

EXERCISE 1:
No. Scheduling another process may overwrite the eax register, which is 
required to return the correct pid value.

EXERCISE 2:
// mpos-kern.c, do_fork() line 265-283
// mpos-kern.c, copy_stack() line 338-352

EXERCISE 3:
Setting a process's state to BLOCKED essentially puts it to sleep, since 
schedule() only runs processes in the RUNNABLE state. After a process exits, 
the waiting processes can be awakened by setting its state back to RUNNABLE, 
and passing the returned value to the waiting process's eax register.

// mpos-kern.c, case INT_SYS_EXIT line 182-184
// mpos-kern.c, case INT_SYS_WAIT line 210-214
	
EXERCISE 4:
Set state of any processes that returned successfully to a waiting process to 
EMPTY, freeing them for reuse.

// mpos-kern.c, case INT_SYS_EXIT line 185-186
// mpos-kern.c, case INT_SYS_WAIT line 208

EXERCISE 5:
void start(void)
{
	int x = 0;  /* note that local variable x lives on the stack */

 	volatile int *i = &x;	// pointer to volatile integer
	int *volatile j = &x;	// volatile pointer to non-volatile integer

	pid_t p = sys_fork();
	if (p == 0) // if child process
	{
		i = &x;	// sets i to child's x?
		j = &x;	// sets j to parent's x?
		*i = 1;
		*j = 1;
	}
	else if (p > 0)
		sys_wait(p); // assume blocking implementation
	app_printf("%d", x);
	sys_exit(0);
}

EXERICSE 6:
// mpos.h, line 13
// mpos-app.h, sys_newthread() line 83-104
// mpos-kern.c, line 128
// mpos-kern.c, case INT_SYS_NEWTHREAD line 158-163
// mpos-kern.c, do_newthread() line 355-378
